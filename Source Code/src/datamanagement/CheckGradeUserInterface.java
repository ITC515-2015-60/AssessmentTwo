package datamanagement;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;

import java.awt.Font;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

/**
 * This class code-behind for the View.
 *
 * @author Andrew Tobin
 * @since 2015-08-05
 */
public class CheckGradeUserInterface extends JFrame
		implements IUnitLister,
		IStudentLister
{

	// Variables used internally
	private CheckGradeControl checkGradeControl_;
	private DefaultComboBoxModel unitsListModel_;
	private DefaultComboBoxModel studentRecordsListModel_;
	private float assessment1Mark_;
	private float assessment2Mark_;
	private float examMark_;
	private Integer studentId_;

	// Connections to the view objects
	private JButton changeButton;
	private JButton checkGradeButton;
	private JButton saveButton;
	private JComboBox unitsListComboBox;
	private JComboBox studentRecordsComboBox;
	private JLabel checkGradeUILabel;
	private JLabel assessment1Label;
	private JLabel assessment2Label;
	private JLabel examLabel;
	private JLabel gradeLabel;
	private JLabel errorMessageLabel;
	private JPanel unitPanel;
	private JPanel studentPanel;
	private JPanel marksPanel;
	private JPanel gradePanel;
	private JTextField assessment1MarkTextField;
	private JTextField assessment2MarkTextField;
	private JTextField examMarkTextField;


	/**
	 * Wire the view control to the view.
	 * @param checkGradeControl
	 */
	public CheckGradeUserInterface(CheckGradeControl checkGradeControl) {
		checkGradeControl_ = checkGradeControl;

		unitsListModel_ = new DefaultComboBoxModel(new String[0]);
		studentRecordsListModel_ = new DefaultComboBoxModel(new String[0]);

		initComponents();

		unitsListComboBox.setModel(unitsListModel_);
		studentRecordsComboBox.setModel(studentRecordsListModel_);

		errorMessageLabel.setText("");
	}



	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		checkGradeUILabel = new JLabel();
		unitPanel = new JPanel();
		unitsListComboBox = new JComboBox();
		studentPanel = new JPanel();
		studentRecordsComboBox = new JComboBox();
		marksPanel = new JPanel();
		assessment1Label = new JLabel();
		assessment2Label = new JLabel();
		examLabel = new JLabel();
		assessment1MarkTextField = new JTextField();
		assessment2MarkTextField = new JTextField();
		examMarkTextField = new JTextField();
		changeButton = new JButton();
		gradePanel = new JPanel();
		gradeLabel = new JLabel();

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		checkGradeUILabel.setFont(new Font("Tahoma", 0, 16)); // NOI18N
		checkGradeUILabel.setText("Check Grade UI");

		unitPanel.setBorder(BorderFactory.createTitledBorder("Unit"));

		unitsListComboBox.setModel(unitsListModel_);
		unitsListComboBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent event) {
				unitsListComboBoxItemStateChanged(event);
			}
		});

		GroupLayout unitPanelLayout = new GroupLayout(unitPanel);
		unitPanel.setLayout(unitPanelLayout);

		unitPanelLayout.setHorizontalGroup(
				unitPanelLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(unitPanelLayout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(unitsListComboBox,
										GroupLayout.PREFERRED_SIZE, 185,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap(GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		unitPanelLayout.setVerticalGroup(
				unitPanelLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(unitPanelLayout
								.createSequentialGroup()
								.addComponent(unitsListComboBox,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap(GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		studentPanel.setBorder(BorderFactory.createTitledBorder("Student"));

		studentRecordsComboBox.setModel(studentRecordsListModel_);

		studentRecordsComboBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent event) {
				studentRecordsComboBoxItemStateChanged(event);
			}
		});

		GroupLayout studentPanelLayout = new GroupLayout(studentPanel);
		studentPanel.setLayout(studentPanelLayout);

		studentPanelLayout.setHorizontalGroup(
				studentPanelLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(studentPanelLayout.createSequentialGroup()
								.addContainerGap()
								.addComponent(studentRecordsComboBox,
										GroupLayout.PREFERRED_SIZE, 185,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap(GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		studentPanelLayout.setVerticalGroup(
				studentPanelLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(studentPanelLayout.createSequentialGroup()
								.addComponent(studentRecordsComboBox,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap(GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		marksPanel.setBorder(BorderFactory.createTitledBorder("Marks"));

		assessment1Label.setText("Asg1:");

		assessment2Label.setText("Asg2:");

		examLabel.setText("Exam:");

		assessment1MarkTextField.setEditable(false);
		assessment1MarkTextField.addKeyListener(new KeyAdapter() {
			public void keyTyped(KeyEvent event) {
				assessment1MarkTextFieldKeyTyped(event);
			}
		});

		assessment2MarkTextField.setEditable(false);
		assessment2MarkTextField.addKeyListener(new KeyAdapter() {
			public void keyTyped(KeyEvent event) {
				assessment1MarkTextFieldKeyTyped(event);
			}
		});

		examMarkTextField.setEditable(false);
		examMarkTextField.addKeyListener(new KeyAdapter() {
			public void keyTyped(KeyEvent event) {
				assessment1MarkTextFieldKeyTyped(event);
			}
		});

		changeButton.setText("Change");
		changeButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				changeButtonActionPerformed(event);
			}
		});

		checkGradeButton = new JButton();
		checkGradeButton.setText("Check Grade");
		checkGradeButton.setActionCommand("checkGrade");
		checkGradeButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				saveButtonActionPerformed(event);
			}
		});

		GroupLayout marksPanelLayout = new GroupLayout(marksPanel);
		marksPanelLayout.setHorizontalGroup(
				marksPanelLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(marksPanelLayout.createSequentialGroup()
								.addGroup(marksPanelLayout.createParallelGroup(Alignment.LEADING)
										.addGroup(marksPanelLayout.createSequentialGroup()
												.addContainerGap()
												.addComponent(assessment1Label)
												.addPreferredGap(ComponentPlacement.RELATED)
												.addComponent(assessment1MarkTextField,
														GroupLayout.PREFERRED_SIZE,
														59,
														GroupLayout.PREFERRED_SIZE)
												.addGap(18)
												.addComponent(assessment2Label))
										.addGroup(marksPanelLayout.createSequentialGroup()
												.addGap(85)
												.addComponent(changeButton, GroupLayout.PREFERRED_SIZE,
														84, GroupLayout.PREFERRED_SIZE)))
								.addGap(18)
								.addGroup(marksPanelLayout.createParallelGroup(Alignment.TRAILING)
										.addGroup(marksPanelLayout.createSequentialGroup()
												.addComponent(assessment2MarkTextField,
														GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
												.addGap(18)
												.addComponent(examLabel))
										.addComponent(checkGradeButton))
								.addGap(18)
								.addComponent(examMarkTextField, GroupLayout.PREFERRED_SIZE,
										59, GroupLayout.PREFERRED_SIZE)
								.addGap(15))
		);

		marksPanelLayout.setVerticalGroup(
				marksPanelLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(marksPanelLayout.createSequentialGroup()
								.addGroup(marksPanelLayout.createParallelGroup(Alignment.BASELINE)
										.addComponent(assessment1Label)
										.addComponent(assessment1MarkTextField,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(assessment2Label)
										.addComponent(assessment2MarkTextField,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(examLabel)
										.addComponent(examMarkTextField,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addGroup(marksPanelLayout.createParallelGroup(Alignment.BASELINE)
										.addComponent(changeButton)
										.addComponent(checkGradeButton))
								.addContainerGap())
		);

		marksPanel.setLayout(marksPanelLayout);

		gradePanel.setBorder(BorderFactory.createTitledBorder("Grade"));

		gradeLabel.setFont(new Font("Tahoma", 0, 24)); // NOI18N
		gradeLabel.setForeground(new Color(255, 0, 0));
		gradeLabel.setHorizontalAlignment(SwingConstants.CENTER);
		gradeLabel.setText("grade");

		GroupLayout gradePanelLayout = new GroupLayout(gradePanel);
		gradePanel.setLayout(gradePanelLayout);

		gradePanelLayout.setHorizontalGroup(
				gradePanelLayout.createParallelGroup(Alignment.LEADING)
						.addComponent(gradeLabel, Alignment.TRAILING,
								GroupLayout.DEFAULT_SIZE,
								153, Short.MAX_VALUE));

		gradePanelLayout.setVerticalGroup(
				gradePanelLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(gradePanelLayout.createSequentialGroup()
								.addGap(34, 34, 34)
								.addComponent(gradeLabel)
								.addContainerGap(43, Short.MAX_VALUE)));
		
		errorMessageLabel = new JLabel();
		errorMessageLabel.setText("Error message");
		errorMessageLabel.setForeground(Color.RED);
		errorMessageLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));

		saveButton = new JButton();
		saveButton.setText("Save");

		saveButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				checkGradeButtonActionPerformed(event);
			}
		});

		GroupLayout layout = new GroupLayout(getContentPane());

		layout.setHorizontalGroup(
				layout.createParallelGroup(Alignment.LEADING)
					.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
									.addGroup(layout.createSequentialGroup()
											.addContainerGap()
											.addComponent(errorMessageLabel,
													GroupLayout.DEFAULT_SIZE,
													400,
													Short.MAX_VALUE))
									.addGroup(layout.createSequentialGroup()
											.addContainerGap()
											.addGroup(layout.createParallelGroup(Alignment.LEADING,
													false)
													.addComponent(marksPanel,
															GroupLayout.DEFAULT_SIZE,
															GroupLayout.DEFAULT_SIZE,
															Short.MAX_VALUE)
													.addGroup(layout.createSequentialGroup()
															.addGroup(layout.createParallelGroup(Alignment.LEADING)
																	.addComponent(unitPanel,
																			GroupLayout.PREFERRED_SIZE,
																			GroupLayout.DEFAULT_SIZE,
																			GroupLayout.PREFERRED_SIZE)
																	.addComponent(studentPanel,
																			GroupLayout.PREFERRED_SIZE,
																			GroupLayout.DEFAULT_SIZE,
																			GroupLayout.PREFERRED_SIZE))
															.addGap(18)
															.addComponent(gradePanel,
																	GroupLayout.PREFERRED_SIZE,
																	GroupLayout.DEFAULT_SIZE,
																	GroupLayout.PREFERRED_SIZE))))
									.addGroup(layout.createSequentialGroup()
											.addGap(157)
											.addComponent(checkGradeUILabel))
									.addGroup(layout.createSequentialGroup()
											.addGap(165)
											.addComponent(saveButton,
													GroupLayout.PREFERRED_SIZE,
													86,
													GroupLayout.PREFERRED_SIZE)))
							.addContainerGap())
		);

		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(checkGradeUILabel)
					.addGap(13)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addComponent(unitPanel,
									GroupLayout.PREFERRED_SIZE,
									GroupLayout.DEFAULT_SIZE,
									GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(studentPanel,
									GroupLayout.PREFERRED_SIZE,
									GroupLayout.DEFAULT_SIZE,
									GroupLayout.PREFERRED_SIZE))
						.addComponent(gradePanel,
								GroupLayout.PREFERRED_SIZE,
								GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED,
							GroupLayout.DEFAULT_SIZE,
							Short.MAX_VALUE)
					.addComponent(marksPanel, GroupLayout.PREFERRED_SIZE,
							GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(saveButton)
					.addGap(11)
					.addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE,
							30, GroupLayout.PREFERRED_SIZE)
					.addContainerGap())
		);

		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents


	/**
	 * The event for when the unitsListComboBox changes.
	 * @param event
	 */
	private void unitsListComboBoxItemStateChanged(ItemEvent event) {// GEN-FIRST:event_jComboBox1ItemStateChanged
		String selectedUnit = (String) unitsListComboBox.getSelectedItem();

		clearStudentMarks();
		clearStudents();

		if (event.getStateChange() == ItemEvent.SELECTED) {

			if (selectedUnit.equals((String) unitsListComboBox.getItemAt(0))) {
				selectedUnit = "NONE";
			}

			checkGradeControl_.unitSelected(selectedUnit);
		}
	}// GEN-LAST:event_jComboBox1ItemStateChanged



	/**
	 * The event for when the studentRecordsListComboBox changes.
	 * @param event
	 */
	private void studentRecordsComboBoxItemStateChanged(ItemEvent event) {// GEN-FIRST:event_jComboBox2ItemStateChanged
		clearStudentMarks();
		String sekectedStudent = (String) studentRecordsComboBox.getSelectedItem();

		if (event.getStateChange() == ItemEvent.SELECTED) {

			if (sekectedStudent.equals((String) studentRecordsComboBox.getItemAt(0))) {
				studentId_ = new Integer(0);
				checkGradeControl_.studentSelected(studentId_);
			} else {
				studentId_ = new Integer(sekectedStudent.split("\\s")[0]);
			}

			checkGradeControl_.studentSelected(studentId_);
		}
	}// GEN-LAST:event_jComboBox2ItemStateChanged



	/**
	 * The event for when the save button is pressed.
	 * @param event
	 */
	private void saveButtonActionPerformed(ActionEvent event) {// GEN-FIRST:event_jButton3ActionPerformed
		assessment1Mark_ = new Float(assessment1MarkTextField.getText()).floatValue();
		assessment2Mark_ = new Float(assessment2MarkTextField.getText()).floatValue();

		examMark_ = new Float(examMarkTextField.getText()).floatValue();

		try {
			String studentGrade = checkGradeControl_
					.checkGrade(assessment1Mark_, assessment2Mark_, examMark_);
			gradeLabel.setText(studentGrade);
		}
		catch (RuntimeException exceptionMessage) {
			errorMessageLabel.setText(exceptionMessage.getMessage());
		}
	}// GEN-LAST:event_jButton3ActionPerformed



	/**
	 * The event for when the change button is pressed.
	 * @param event
	 */
	private void changeButtonActionPerformed(ActionEvent event) {// GEN-FIRST:event_jButton1ActionPerformed
		checkGradeControl_.enableChangeMarks();
		gradeLabel.setText("");
	}// GEN-LAST:event_jButton1ActionPerformed



	/**
	 * Clear the grade when the assessment 1 mark changes.
	 * @param event
	 */
	private void assessment1MarkTextFieldKeyTyped(KeyEvent event) {// GEN-FIRST:event_jTextField1KeyTyped
		gradeLabel.setText("");
		errorMessageLabel.setText("");
	}// GEN-LAST:event_jTextField1KeyTyped



	/**
	 * The event for when the check grade button is pressed.
	 * @param event
	 */
	private void checkGradeButtonActionPerformed(ActionEvent event) {// GEN-FIRST:event_jButton2ActionPerformed
		float assessment1Mark =
				new Float(assessment1MarkTextField.getText()).floatValue();

		float assessment2Mark =
				new Float(assessment2MarkTextField.getText()).floatValue();

		float examMark = new Float(examMarkTextField.getText()).floatValue();

		errorMessageLabel.setText("");

		try {
			checkGradeControl_.saveGrade(assessment1Mark, assessment2Mark,
					examMark);
		}
		catch (RuntimeException exceptionMessage) {
			errorMessageLabel.setText(exceptionMessage.getMessage());
		}
	}// GEN-LAST:event_jButton2ActionPerformed


	/**
	 * Clear the units list, and the students list.
	 */
	public void clearUnits() {
		unitsListModel_.removeAllElements();
		unitsListModel_.addElement("<none selected>");
		clearStudents();
	}


	/**
	 * Add a unit to the UI List
	 * @param unit
	 */
	public void addUnit(IUnit unit) {
		unitsListModel_.addElement(unit.getUnitCode());
	}


	/**
	 * Allows the units combo box to be changed.
	 * @param enable
	 */
	public void enableUnitsComboBox(boolean enable) {
		unitsListComboBox.setEnabled(enable);
		errorMessageLabel.setText("");
	}


	/**
	 * Clears the students in the student records combo box.
	 */
	public void clearStudents() {
		studentRecordsListModel_.removeAllElements();
		studentRecordsListModel_.addElement("<none selected>");
	}


	/**
	 * Adds a student's record to the student records combo box.
	 * @param student
	 */
	public void addStudent(IStudent student) {
		studentRecordsListModel_.addElement(student.getId().toString() + " : "
				+ student.getFirstName() + " " + student.getLastName());
	}


	/**
	 * Allows the student records combo box to be changed.
	 * @param enable
	 */
	public void enableStudentRecordsComboBox(boolean enable) {
		studentRecordsComboBox.setEnabled(enable);
		errorMessageLabel.setText("");
	}


	/**
	 * Sets the text fields when a student record is chosen.
	 * @param record
	 */
	public void setRecord(IStudentUnitRecord record) {
		assessment1MarkTextField.setText(
				new Float(record.getAssignment1Mark()).toString());

		assessment2MarkTextField.setText(
				new Float(record.getAssignment2Mark()).toString());

		examMarkTextField.setText(new Float(record.getExamMark()).toString());

		gradeLabel.setText("");
	}


	/**
	 * Clears the text fields.
	 */
	public void clearStudentMarks() {
		assessment1MarkTextField.setText("");
		assessment2MarkTextField.setText("");
		examMarkTextField.setText("");
		gradeLabel.setText("");
		errorMessageLabel.setText("");

		assessment1MarkTextField.setEditable(false);
		assessment2MarkTextField.setEditable(false);
		examMarkTextField.setEditable(false);
	}



	/**
	 * Sets all the UI elements to be able to be edited.
	 * @param enable
	 */
	public void enableEditingMarks(boolean enable) {
		assessment1MarkTextField.setEditable(enable);
		assessment2MarkTextField.setEditable(enable);
		examMarkTextField.setEditable(enable);
	}



	/**
	 * Enables the check grade button on the UI.
	 * @param enable
	 */
	public void enableCheckGradeButton(boolean enable) {
		checkGradeButton.setEnabled(enable);
	}


	/**
	 * Enables the change grade button on the UI.
	 * @param enable
	 */
	public void enableChangeGradeButton(boolean enable) {
		changeButton.setEnabled(enable);
	}


	/**
	 * Enables the save button on the UI.
	 * @param enable
	 */
	public void enableSaveButton(boolean enable) {
		saveButton.setEnabled(enable);
	}
}
